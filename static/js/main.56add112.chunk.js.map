{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","addressRef","useRef","address","setAddress","useState","item","setItem","errorMsg","setErrorMsg","coords","setCoords","storeData","setStoreData","rawText","setRawText","useEffect","window","google","maps","current","autocomplete","places","Autocomplete","types","addListener","place","getPlace","geometry","formatted_address","lat","location","lng","React","createElement","className","ref","value","onChange","e","target","placeholder","onClick","async","geoUrl","encodeURIComponent","resp","fetch","j","json","status","results","length","err","method","headers","Content-Type","body","JSON","stringify","latitude","longitude","textData","text","parsed","parse","error","storeEntries","Object","entries","sort","a","b","Number","price","map","_ref","storeName","s","key","renderStoreTable","_ref2","barWidth","Math","max","style","width","renderPriceChart","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.56add112.chunk.js","sourcesContent":["// frontend/src/App.js\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const addressRef = useRef(null);\n\n  const [address, setAddress] = useState(\"\");\n  const [item, setItem] = useState(\"\");\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const [coords, setCoords] = useState(null);\n\n  // We'll store the parsed store data if we can parse JSON\n  const [storeData, setStoreData] = useState(null);\n\n  // We'll store the raw text if parsing fails or if needed\n  const [rawText, setRawText] = useState(\"\");\n\n  // Hook up Google Places Autocomplete for address\n  useEffect(() => {\n    if (window.google && window.google.maps && addressRef.current) {\n      const autocomplete = new window.google.maps.places.Autocomplete(\n        addressRef.current,\n        { types: [\"geocode\"] }\n      );\n      autocomplete.addListener(\"place_changed\", () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry) {\n          setAddress(place.formatted_address || \"\");\n          const lat = place.geometry.location.lat();\n          const lng = place.geometry.location.lng();\n          setCoords({ lat, lng });\n        }\n      });\n    }\n  }, []);\n\n  async function handleSearch() {\n    setErrorMsg(\"\");\n    setStoreData(null);\n    setRawText(\"\");\n\n    let lat = coords?.lat;\n    let lng = coords?.lng;\n\n    // Fallback geocode if user typed address but didn't pick from dropdown\n    if (!lat || !lng) {\n      try {\n        const geoUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\n          address\n        )}&key=AIzaSyCodFuwZnIn1sJu08OdpieZsr2RH49kWG4`;\n        const resp = await fetch(geoUrl);\n        const j = await resp.json();\n        if (j.status === \"OK\" && j.results.length) {\n          lat = j.results[0].geometry.location.lat;\n          lng = j.results[0].geometry.location.lng;\n          setCoords({ lat, lng });\n        } else {\n          setErrorMsg(\"Could not geocode address.\");\n          return;\n        }\n      } catch (err) {\n        setErrorMsg(\"Error geocoding: \" + err);\n        return;\n      }\n    }\n\n    if (!lat || !lng || !item) {\n      setErrorMsg(\"Missing address or item.\");\n      return;\n    }\n\n    // Call our backend\n    try {\n      const resp = await fetch(\"http://localhost:3001/api/cheapest-item\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ latitude: lat, longitude: lng, item })\n      });\n      const textData = await resp.text(); // raw text from the server\n      setRawText(textData); // store the raw text\n\n      // Attempt to parse\n      try {\n        const parsed = JSON.parse(textData);\n        if (parsed.error) {\n          setErrorMsg(parsed.error);\n          setStoreData(null);\n        } else if (typeof parsed === \"object\") {\n          setStoreData(parsed);\n        } else {\n          setStoreData(null);\n        }\n      } catch {\n        setStoreData(null);\n      }\n    } catch (err) {\n      setErrorMsg(\"Backend error: \" + err);\n    }\n  }\n\n  // Helper to render a table if we have storeData\n  function renderStoreTable() {\n    if (!storeData || typeof storeData !== \"object\") return null;\n\n    // Convert to array entries, so we can sort\n    const storeEntries = Object.entries(storeData);\n    if (!storeEntries.length) return null;\n\n    // Sort by ascending price\n    storeEntries.sort((a, b) => {\n      const priceA = Number(a[1].price) || 0;\n      const priceB = Number(b[1].price) || 0;\n      return priceA - priceB;\n    });\n\n    return (\n      <table className=\"store-table\">\n        <thead>\n          <tr>\n            <th>Store</th>\n            <th>Address</th>\n            <th>Price</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          {storeEntries.map(([storeName, s]) => (\n            <tr key={storeName}>\n              <td>{storeName}</td>\n              <td>{s.address}</td>\n              <td>${s.price}</td>\n              <td>{s[\"short-description\"]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  // Helper to render a simple bar chart if we have storeData\n  function renderPriceChart() {\n    if (!storeData || typeof storeData !== \"object\") return null;\n\n    const storeEntries = Object.entries(storeData);\n    if (!storeEntries.length) return null;\n\n    // Sort by ascending price to match the table\n    storeEntries.sort((a, b) => {\n      const priceA = Number(a[1].price) || 0;\n      const priceB = Number(b[1].price) || 0;\n      return priceA - priceB;\n    });\n\n    return (\n      <div className=\"chart-container\">\n        {storeEntries.map(([storeName, s]) => {\n          const price = Number(s.price) || 0;\n          const barWidth = Math.max(price * 50, 0);\n          return (\n            <div key={storeName} className=\"chart-row\">\n              <div className=\"chart-label\">{storeName}</div>\n              <div className=\"chart-bar\" style={{ width: barWidth }}>\n                ${s.price}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app-wrapper\">\n      {/* A gradient header */}\n      <header className=\"app-header\">\n        <h1 className=\"header-title\">Save, Don't Stress</h1>\n      </header>\n\n      {/* The main container */}\n      <div className=\"app-container\">\n        <div className=\"input-group\">\n          <label className=\"label\">Address:</label>\n          <input\n            ref={addressRef}\n            value={address}\n            onChange={(e) => setAddress(e.target.value)}\n            className=\"input\"\n            placeholder=\"Type or select address\"\n          />\n        </div>\n\n        <div className=\"input-group\">\n          <label className=\"label\">Grocery Item:</label>\n          <input\n            value={item}\n            onChange={(e) => setItem(e.target.value)}\n            className=\"input\"\n            placeholder=\"milk\"\n          />\n        </div>\n\n        <button className=\"search-button\" onClick={handleSearch}>\n          Search\n        </button>\n\n        {errorMsg && <div className=\"error-message\">{errorMsg}</div>}\n\n        {storeData && (\n          <div className=\"results-container\">\n            <h2>Store Data (Cheapest to Most Expensive)</h2>\n            {renderStoreTable()}\n\n            <h2>Price Chart (Ascending)</h2>\n            {renderPriceChart()}\n          </div>\n        )}\n\n        {!storeData && rawText && !errorMsg && (\n          <div className=\"raw-json-container\">\n            <h2>Raw Response (Unparsed)</h2>\n            <pre className=\"raw-json\">{rawText}</pre>\n          </div>\n        )}\n      </div>\n\n      {/* A simple footer */}\n      <footer className=\"app-footer\">\n        <p>© 2025 Grocery Finder. All rights reserved.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}